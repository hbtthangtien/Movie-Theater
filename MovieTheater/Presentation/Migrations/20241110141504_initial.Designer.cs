// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Entity;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(MovieTheaterContext))]
    [Migration("20241110141504_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MovieType", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("movie_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.HasKey("MovieId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("Movie_Type", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullname");

                    b.Property<string>("Gender")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gender");

                    b.Property<string>("IdentityCard")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("identity_card");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("refresh_token");

                    b.Property<DateOnly?>("RefreshTokenExpire")
                        .HasColumnType("date")
                        .HasColumnName("refresh_token_expire");

                    b.Property<DateOnly?>("RegisterDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("register_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("IdentityCard")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique()
                        .HasDatabaseName("EmailIndex")
                        .HasFilter("[NormalizedEmail] IS NOT NULL");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RefreshToken")
                        .IsUnique()
                        .HasFilter("[refresh_token] IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.CinemaRoom", b =>
                {
                    b.Property<int>("CinemaRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cinema_room_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CinemaRoomId"));

                    b.Property<string>("CinemeRoomName")
                        .HasMaxLength(2555)
                        .HasColumnType("nvarchar(2555)")
                        .HasColumnName("cineme_room_name");

                    b.Property<int?>("SeatQuantity")
                        .HasColumnType("int")
                        .HasColumnName("seat_quantity");

                    b.HasKey("CinemaRoomId");

                    b.ToTable("Cinema_Room", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("employee_id");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AccountId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Invoice", b =>
                {
                    b.Property<string>("InvoiceId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("invoice_id");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AddScore")
                        .HasColumnType("float")
                        .HasColumnName("add_score");

                    b.Property<DateTime>("BookingDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasColumnName("booking_date");

                    b.Property<string>("MovieName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("movie_name");

                    b.Property<DateOnly?>("ScheduleShow")
                        .HasColumnType("date")
                        .HasColumnName("schedule_show");

                    b.Property<string>("ScheduleShowTime")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("schedule_show_time");

                    b.Property<string>("Seat")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("seat");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalMoney")
                        .HasColumnType("money")
                        .HasColumnName("total_money");

                    b.Property<double?>("UseScore")
                        .HasColumnType("float")
                        .HasColumnName("use_score");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AccountId");

                    b.ToTable("Invoice", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Member", b =>
                {
                    b.Property<string>("MemberId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("member_id");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("Score")
                        .HasColumnType("float")
                        .HasColumnName("score");

                    b.HasKey("MemberId");

                    b.HasIndex("AccountId");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Movie", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("movie_id");

                    b.Property<string>("Actor")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("actor");

                    b.Property<int?>("CinemaRoomId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_room_id");

                    b.Property<string>("Content")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("content");

                    b.Property<string>("Director")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("director");

                    b.Property<string>("Duration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("duration");

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<string>("LargeImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("large_image");

                    b.Property<string>("MovieNameEnglish")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("movie_name_english");

                    b.Property<string>("MovieNameVn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("movie_name_vn");

                    b.Property<string>("MovieProductionCompany")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("movie_production_company");

                    b.Property<string>("SmallImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("small_image");

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("version");

                    b.HasKey("MovieId");

                    b.HasIndex("CinemaRoomId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.MovieSchedule", b =>
                {
                    b.Property<string>("MovieId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("movie_id");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.HasKey("MovieId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Movie_Schedule", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("payment_method");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int")
                        .HasColumnName("payment_status");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("float")
                        .HasColumnName("total_amount");

                    b.HasKey("PaymentId")
                        .HasName("PK_Payment_Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Payment", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("promotion_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Detail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("detail");

                    b.Property<int?>("DiscountLevel")
                        .HasColumnType("int")
                        .HasColumnName("discount_level");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("end_time");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("start_time");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.HasKey("PromotionId");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScheduleId"));

                    b.Property<DateOnly?>("MovieScheduleDate")
                        .HasMaxLength(255)
                        .HasColumnType("date")
                        .HasColumnName("MovieScheduleDate");

                    b.Property<string>("ScheduleTime")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("schedule_time");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.ScheduleSeat", b =>
                {
                    b.Property<string>("ScheduleSeatId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("schedule_seat_id");

                    b.Property<string>("MovieId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("movie_id");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("int")
                        .HasColumnName("schedule_id");

                    b.Property<string>("SeatColumn")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("seat_column");

                    b.Property<int?>("SeatId")
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    b.Property<int?>("SeatRow")
                        .HasColumnType("int")
                        .HasColumnName("seat_row");

                    b.Property<int?>("SeatStatus")
                        .HasColumnType("int")
                        .HasColumnName("seat_status");

                    b.Property<int?>("seatType_id")
                        .HasColumnType("int");

                    b.HasKey("ScheduleSeatId");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SeatId");

                    b.HasIndex("seatType_id");

                    b.ToTable("Schedule_Seat", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Seat", b =>
                {
                    b.Property<int>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("seat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatId"));

                    b.Property<int?>("CinemaRoomId")
                        .HasColumnType("int")
                        .HasColumnName("cinema_room_id");

                    b.Property<string>("SeatColunm")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("seat_colunm");

                    b.Property<int?>("SeatRow")
                        .HasColumnType("int")
                        .HasColumnName("seat_row");

                    b.Property<int?>("SeatStatus")
                        .HasColumnType("int")
                        .HasColumnName("seat_status");

                    b.Property<int?>("seatType_id")
                        .HasColumnType("int");

                    b.HasKey("SeatId");

                    b.HasIndex("CinemaRoomId");

                    b.HasIndex("seatType_id");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ticket_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketId"));

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<string>("ScheduleSeatId")
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("TicketType")
                        .HasColumnType("int")
                        .HasColumnName("ticket_type");

                    b.HasKey("TicketId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ScheduleSeatId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.TransactionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("notes");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("TransactionHistory", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.Type", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId");

                    b.ToTable("Type", (string)null);
                });

            modelBuilder.Entity("WebAPI.Entity.TypeSeat", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TypeName");

                    b.Property<double?>("price")
                        .HasColumnType("float")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("TypeSeat", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieType", b =>
                {
                    b.HasOne("WebAPI.Entity.Movie", null)
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Movie_Type");

                    b.HasOne("WebAPI.Entity.Type", null)
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Type_Movie");
                });

            modelBuilder.Entity("WebAPI.Entity.Employee", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", "Account")
                        .WithMany("Employees")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Roles_Employee");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebAPI.Entity.Invoice", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebAPI.Entity.Member", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", "Account")
                        .WithMany("Members")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebAPI.Entity.Movie", b =>
                {
                    b.HasOne("WebAPI.Entity.CinemaRoom", "CinemaRoom")
                        .WithMany("Movies")
                        .HasForeignKey("CinemaRoomId")
                        .HasConstraintName("FK_Cinema_Room_Movie");

                    b.Navigation("CinemaRoom");
                });

            modelBuilder.Entity("WebAPI.Entity.MovieSchedule", b =>
                {
                    b.HasOne("WebAPI.Entity.Movie", "Movie")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK_Movie_Schedule");

                    b.HasOne("WebAPI.Entity.Schedule", "Schedule")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK_Schedule_Movie");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WebAPI.Entity.Payment", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", "Account")
                        .WithMany("Payments")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Payment_Account_AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WebAPI.Entity.ScheduleSeat", b =>
                {
                    b.HasOne("WebAPI.Entity.Movie", "Movie")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("MovieId")
                        .HasConstraintName("FK_Schedule_Seat_Movie");

                    b.HasOne("WebAPI.Entity.Schedule", "Schedule")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK_Schedule_Seat_Schedule");

                    b.HasOne("WebAPI.Entity.Seat", "Seat")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("SeatId")
                        .HasConstraintName("FK_Schedule_Seat_Seat");

                    b.HasOne("WebAPI.Entity.TypeSeat", "TypeSeat")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("seatType_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TypeSeat_ScheduleSeat");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");

                    b.Navigation("Seat");

                    b.Navigation("TypeSeat");
                });

            modelBuilder.Entity("WebAPI.Entity.Seat", b =>
                {
                    b.HasOne("WebAPI.Entity.CinemaRoom", "CinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("CinemaRoomId")
                        .HasConstraintName("FK_Seat_Cinema_Room");

                    b.HasOne("WebAPI.Entity.TypeSeat", "TypeSeat")
                        .WithMany("Seats")
                        .HasForeignKey("seatType_id")
                        .HasConstraintName("FK_Seat_SeatType");

                    b.Navigation("CinemaRoom");

                    b.Navigation("TypeSeat");
                });

            modelBuilder.Entity("WebAPI.Entity.Ticket", b =>
                {
                    b.HasOne("WebAPI.Entity.ApplicationUser", "Account")
                        .WithMany("Tickets")
                        .HasForeignKey("AccountId");

                    b.HasOne("WebAPI.Entity.ScheduleSeat", "ScheduleSeat")
                        .WithMany("Tickets")
                        .HasForeignKey("ScheduleSeatId");

                    b.Navigation("Account");

                    b.Navigation("ScheduleSeat");
                });

            modelBuilder.Entity("WebAPI.Entity.TransactionHistory", b =>
                {
                    b.HasOne("WebAPI.Entity.Payment", "Payment")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("PaymentId")
                        .IsRequired()
                        .HasConstraintName("FK_TransactionHistory_Payment");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("WebAPI.Entity.ApplicationUser", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Invoices");

                    b.Navigation("Members");

                    b.Navigation("Payments");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WebAPI.Entity.CinemaRoom", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Seats");
                });

            modelBuilder.Entity("WebAPI.Entity.Movie", b =>
                {
                    b.Navigation("MovieSchedules");

                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("WebAPI.Entity.Payment", b =>
                {
                    b.Navigation("TransactionHistories");
                });

            modelBuilder.Entity("WebAPI.Entity.Schedule", b =>
                {
                    b.Navigation("MovieSchedules");

                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("WebAPI.Entity.ScheduleSeat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("WebAPI.Entity.Seat", b =>
                {
                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("WebAPI.Entity.TypeSeat", b =>
                {
                    b.Navigation("ScheduleSeats");

                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
